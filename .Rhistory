ggplot(sample_frac(df_gamma, 0.1), aes(x=D, y=CV, color=section)) + geom_point() +
ggtitle("Volcano Plot Using Gamma Distribution")
# Plot
ggplot(sample_frac(df_gamma, 0.5), aes(x=D, y=CV, color=section)) + geom_point() +
ggtitle("Volcano Plot Using Gamma Distribution")
# Gamma:
gam_1 <- ggplot(sample_frac(df_gamma, 0.5), aes(x=D, y=CV, color=out)) + scale_colour_viridis() +
geom_point() + labs(color="Status") + ggtitle("Asym. Laplace-Weibull") + geom_jitter()
gam_2 <- ggplot(sample_frac(df_gamma, 0.5), aes(x=D, y=CV, color=exp_j)) + scale_colour_viridis() +
geom_point() + labs(color="Prob.") + ggtitle("Joint Exponential") + geom_jitter()
gam_3 <- ggplot(sample_frac(df_gamma, 0.5), aes(x=D, y=CV, color=exp_m)) + scale_colour_viridis() +
geom_point() + labs(color="Prob.") + ggtitle("Marginal Exponential") + geom_jitter()
gam_4 <- ggplot(sample_frac(cluster_gamma, 0.5), aes(x=D, y=CV, color=gg_j)) + scale_colour_viridis() +
geom_point() + labs(color="Prob.") + ggtitle("Joint GG") + geom_jitter()
kinase <- read.csv("Kinase.final.csv", header=TRUE)
View(kinase)
View(kinase)
# Now the other 3 methods
kinase$out <- outlier_DCV(kinase$D, kinase$CV)
setwd("~/Documents/FCCC_Research/Ross_Lab/New_Stuff/Second_Draft")
rm(list=ls())
set.seed(1729) #Set the seed so we can replicate the random results, using
library(ggplot2) #For ggplot
library(dplyr) #For sample_frac
library(gridExtra) #For grid.arrange
library(viridis) #For viridis color scheme
library(VGAM) #For GLM MLE
library(extremevalues) #For outlier finding functions
library(flexsurv) #For generalized gamma MLE
library(cubature) #For adaptive integration
library(parallel) #For parallel computing
# Default values and functions to use for original method
n_total <- 10000 #Number of data points. Doing full simulation
type <- "weibull" #Use Weibull distribution to fit CV
p_theta <- 0.05 #Confidence level for determining theta, the location parameter in asymmetric Laplace
p_kappa <- 0.05 #Confidence level for determining kappa, the asymmetry parameter
k <- 1
# Number of standard deviations away from the mean of the Asymmetric Laplace for middle band
t <- 0.01 #First remove top t points
b <- 0.01 #Also remove bottomw b points
N_u <- 1 #Find the point for CV above which we would not expect to find N_u points
N_l <- 1 #Find the points for CV below which we would not expect to find N_l points
outlier_DCV <- function(D, CV, type="weibull", p_theta=0.05, p_kappa=0.05,
k=1, t=0.01, b=0.01, N_u=0.01, N_l=0.01){
# First fit D to Asymmetric Laplace
fit_ala <- vglm(as.matrix(D) ~ 1, alaplace3, trace=TRUE, crit="c",
control = vglm.control(maxit=50))
CI_theta <- Coef(fit_ala)[1] + summary(fit_ala)@coef3[1,2] * qnorm(1-p_theta/2) *
c(-1,1) #95% confidence interval for theta using approximate normal for MLE
CI_kappa <- log(Coef(fit_ala)[3]) + summary(fit_ala)@coef3[3,2] *
qnorm(1-p_kappa/2) * c(-1,1)
# 95% confidence interval for log(kappa) using approximate normal for MLE
if(CI_theta[1] > 0 || CI_theta[2] < 0){ #If there IS a significant location parameter
theta_est <- Coef(fit_ala)[1] #Make sure to subtract this later when plugging data into F_exp
}else{
theta_est <- 0 #This way we always have a value to subtract from D
}
# Estimate kappa, mu, and standard deviation
if(CI_kappa[1] > 0 || CI_kappa[2] < 0){ #If there IS significant asymmetry
kappa_est <- Coef(fit_ala)[3]
mu_est <- Coef(fit_ala)[2] * (1/kappa_est - kappa_est) / sqrt(2)
sd_est <- sqrt(Coef(fit_ala)[2]^2 + mu_est^2)
}else{
kappa_est <- 1 #This way we always have a value of kappa, even if we won't use it
mu_est <- 0 #Set equal to 0 to avoid numerical imprecision
sd_est <- Coef(fit_ala)[2] #Set equal to this to avoid numerical imprecision
}
lap_range <- mu_est + theta_est + k * sd_est * c(-1,1) #Range of values to use for D
df_temp <- data.frame(D=D, CV=CV, D_out=0, CV_out=0) #Initialize
row.names(df_temp) <- 1:nrow(df_temp) #Explicitly label the rows
df_temp$D_out <- as.numeric( #1 for TRUE and 0 for FALSE
df_temp$D < lap_range[1] | df_temp$D > lap_range[2]
)
df_sub <- df_temp[df_temp$D_out==1,] #Subset of points with outlying D
if(type=="weibull"){ #If using a Weibull distribution for CV
ext_out <- getOutliersI(y=df_sub$CV, rho=c(N_u,N_l),
FLim=c(b,1-t), distribution="weibull")
}else if(type=="lognormal"){
ext_out <- getOutliersI(y=df_sub$CV, rho=c(N_u,N_l),
FLim=c(b,1-t), distribution="lognormal")
}else{
stop("Distribution for CV must be \"weibull\" or \"lognormal\".")
}
df_sub$ext_out <- FALSE #Initialize
df_sub$ext_out[ext_out$iLeft] <- TRUE #Small values of CV
df_sub$ext_out[ext_out$iRight] <- TRUE #Large values of CV
df_temp$CV_out[as.numeric(rownames(df_sub[df_sub$ext_out,]))] <- 1
df_temp$D_out + df_temp$CV_out #Return combined measure of outlier status
}
# Joint method functions (exponential)
# Helper functions:
z <- function(x) {(1-x)/(1+x)}
g <- function(x) {z(x/sqrt(2))} #Represents gamma in my derivation, NOT the gamma function related to
# the factorial function!!!
b <- function(x, y) {sqrt(2)*x/y} #Represents beta in my derivation, NOT the beta function related to
# Probability functions:
F_exp_asym <- function(d, cv, lam_1, lam_2) { #Joint CDF with asymmetric exponential assumption
if(cv < 0){
return(0)
}else if(d <= 0 && cv >= 0 && cv <= sqrt(2)){
return(
lam_1*lam_2*(1-g(cv))*exp((lam_1*g(cv)+lam_2)*d/(1-g(cv))) /
((lam_1*g(cv)+lam_2)*(lam_1+lam_2))
)
}else if(d <= 0 && cv > sqrt(2)){
return(lam_1*exp(lam_2*d)/(lam_1+lam_2))
}else if(d > 0 && cv >= 0 && cv <= sqrt(2)){
return(
-2*lam_1*lam_2*exp(-((1+sqrt(2)/cv)*lam_1+(sqrt(2)/cv-1)*lam_2)*d/2)/(lam_1^2-lam_2^2) -
lam_1*lam_2*(1+g(cv))*exp(-(lam_1+lam_2*g(cv))*sqrt(2)*d/(cv*(g(cv)+1)))/
((lam_1+lam_2*g(cv))*(lam_2-lam_1)) +
lam_1*lam_2*(1-(g(cv))^2)/((lam_1+lam_2*g(cv))*(lam_1*g(cv)+lam_2))
)
}else if(d > 0 && cv > sqrt(2)){
return(1 - lam_2*exp(-lam_1*d)/(lam_1+lam_2))
}
}
F_exp_sym <- function(d, cv, lambda) { #Joint CDF with symmetric exponential assumption
if(cv < 0){
return(0)
}else if(d <= 0 && cv >= 0 && cv <= sqrt(2)){
return((1-g(cv))*exp(lambda*(1+g(cv))*d/(1-g(cv)))/(2*(1+g(cv))))
}else if(d <= 0 && cv > sqrt(2)){
return(exp(lambda*d)/2)
}else if(d > 0 && cv >= 0 && cv <= sqrt(2)){
return(
lambda*exp(-lambda*b(d,cv))*d/2 +
(1/2-1/(g(cv)+1))*(-1+exp(-lambda*b(d,cv))+lambda*b(d,cv)*exp(-lambda*b(d,cv))) +
(1-g(cv))/(2*(1+g(cv)))
)
}else if(d > 0 && cv > sqrt(2)){
return(1-exp(-lambda*d)/2)
}
}
F_D_asym <- function(d, lam_1, lam_2) { #Marginal distribution for D when asymmetric
if(d < 0){
return(
(lam_1/(lam_1+lam_2)) * exp(lam_2*d)
)
}else{
return(
1 - (lam_2/(lam_1+lam_2))*exp(-lam_1*d)
)
}
}
F_D_sym <- function(d, lam) { #Marginal distribution for D when symmetric
if(d < 0){
return(
(1/2) * exp(lam*d)
)
}else{
return(
1 - (1/2)*exp(-lam*d)
)
}
}
F_CV_asym <- function(cv, lam_1, lam_2) { #Marginal distribution for CV when asymmetric
if(cv < 0){
return(0)
}else if(cv >= 0 && cv <= sqrt(2)){
return(
lam_1*lam_2*(1-(g(cv))^2) / ( (lam_1+lam_2*g(cv)) * (lam_1*g(cv)+lam_2))
)
}else{
return(1)
}
}
F_CV_sym <- function(cv, lam) { #Marginal distribution for CV when symmetric
if(cv < 0){
return(0)
}else if(cv >= 0 && cv <= sqrt(2)){
return(
(1-g(cv)) / (1+g(cv))
)
}else{
return(1)
}
}
q_exp_asym <- function(d, cv, lambda_1, lambda_2) {
# Outlier probability for exponential and asymmetric
if(cv < 0 || cv > sqrt(2)){
return(1) #Must be some type of error to get this
}else if(d < 0 && cv >= 0 && cv <= sqrt(2)){ #See picture of why this
return(
F_D_asym(d, lambda_1, lambda_2) - F_exp_asym(d, cv, lambda_1, lambda_2)
)
}else if(d >= 0 && cv >= 0 && cv <= sqrt(2)){ #See picture of why this
return(
1 - F_D_asym(d, lambda_1, lambda_2) - F_CV_asym(cv, lambda_1, lambda_2) +
F_exp_asym(d, cv, lambda_1, lambda_2)
)
}
}
q_exp_sym <- function(d, cv, lambda) {
# Outlier probability for exponential and symmetric
if(cv < 0 || cv > sqrt(2)){
return(1) #Must be some type of error to get this
}else if(d < 0 && cv >= 0 && cv <= sqrt(2)){ #See picture of why this
return(
F_D_sym(d, lambda) - F_exp_sym(d, cv, lambda)
)
}else if(d >= 0 && cv >= 0 && cv <= sqrt(2)){ #See picture of why this
return(
1 - F_D_sym(d, lambda) - F_CV_sym(cv, lambda) + F_exp_sym(d, cv, lambda)
)
}
}
# Combine the model fitting and probability calculations into one function:
q_exp_joint_DCV <- function(D, CV, p_theta=0.05, p_kappa=0.05){
# First fit D to Asymmetric Laplace
fit_ala <- vglm(as.matrix(D) ~ 1, alaplace3, trace=TRUE, crit="c",
control = vglm.control(maxit=50))
CI_theta <- Coef(fit_ala)[1] + summary(fit_ala)@coef3[1,2] * qnorm(1-p_theta/2) *
c(-1,1) #95% confidence interval for theta using approximate normal for MLE
CI_kappa <- log(Coef(fit_ala)[3]) + summary(fit_ala)@coef3[3,2] *
qnorm(1-p_kappa/2) * c(-1,1)
# 95% confidence interval for log(kappa) using approximate normal for MLE
if(CI_theta[1] > 0 || CI_theta[2] < 0){ #If there IS a significant location parameter
theta_est <- Coef(fit_ala)[1] #Make sure to subtract this later when plugging data into F_exp
}else{
theta_est <- 0 #This way we always have a value to subtract from D
}
if(CI_kappa[1] > 0 || CI_kappa[2] < 0){ #If asymmetric. Use q_exp_asym
lambda_exp_1est <- sqrt(2)*(Coef(fit_ala)[3])/(Coef(fit_ala)[2])
lambda_exp_2est <- sqrt(2)/(Coef(fit_ala)[2]*Coef(fit_ala)[3])
}else{ #If symmetric. Use q_exp_sym
lambda_exp_est <- sqrt(2)/(Coef(fit_ala)[2])
}
# Probability calculation
if(CI_kappa[1] > 0 || CI_kappa[2] < 0){ #If we determine the data is asymmetric
return(
mapply(function(d, cv)
{q_exp_asym(d, cv, lambda_exp_1est, lambda_exp_2est)}, D - theta_est, CV
)
)
}else{ #If the data is symmetric
return(
mapply(function(d, cv)
{q_exp_sym(d, cv, lambda_exp_est)}, D - theta_est, CV
)
)
}
}
# Marginal method functions (exponential), using helper functions from before
q_exp_marg_DCV <- function(D, CV, p_theta=0.05, p_kappa=0.05, k=1){
# Assign the value 1 to the middle band in the marginal method
# First fit D to Asymmetric Laplace
fit_ala <- vglm(as.matrix(D) ~ 1, alaplace3, trace=TRUE, crit="c",
control = vglm.control(maxit=50))
CI_theta <- Coef(fit_ala)[1] + summary(fit_ala)@coef3[1,2] * qnorm(1-p_theta/2) *
c(-1,1) #95% confidence interval for theta using approximate normal for MLE
CI_kappa <- log(Coef(fit_ala)[3]) + summary(fit_ala)@coef3[3,2] *
qnorm(1-p_kappa/2) * c(-1,1)
# 95% confidence interval for log(kappa) using approximate normal for MLE
if(CI_theta[1] > 0 || CI_theta[2] < 0){ #If there IS a significant location parameter
theta_est <- Coef(fit_ala)[1] #Make sure to subtract this later when plugging data into F_exp
}else{
theta_est <- 0 #This way we always have a value to subtract from D
}
# Estimate kappa, mu, and standard deviation
if(CI_kappa[1] > 0 || CI_kappa[2] < 0){ #If there IS significant asymmetry
kappa_est <- Coef(fit_ala)[3]
mu_est <- Coef(fit_ala)[2] * (1/kappa_est - kappa_est) / sqrt(2)
sd_est <- sqrt(Coef(fit_ala)[2]^2 + mu_est^2)
lambda_exp_1est <- sqrt(2)*(Coef(fit_ala)[3])/(Coef(fit_ala)[2])
lambda_exp_2est <- sqrt(2)/(Coef(fit_ala)[2]*Coef(fit_ala)[3])
}else{
kappa_est <- 1 #This way we always have a value of kappa, even if we won't use it
mu_est <- 0 #Set equal to 0 to avoid numerical imprecision
sd_est <- Coef(fit_ala)[2] #Set equal to this to avoid numerical imprecision
lambda_exp_est <- sqrt(2)/(Coef(fit_ala)[2])
}
lap_range <- mu_est + theta_est + k * sd_est * c(-1,1) #Range of values to use for D
df_temp <- data.frame(D=D, CV=CV, D_out=0, CV_q=1) #Initialize
row.names(df_temp) <- 1:nrow(df_temp) #Explicitly label the rows
df_temp$D_out <- as.numeric( #1 for TRUE and 0 for FALSE
df_temp$D < lap_range[1] | df_temp$D > lap_range[2]
)
if(CI_kappa[1] > 0 || CI_kappa[2] < 0){ #If there IS significant asymmetry
df_temp$CV_q[df_temp$D_out==1] <-
sapply(df_temp$CV[df_temp$D_out==1], function(cv){
1 - F_CV_asym(cv, lambda_exp_1est, lambda_exp_2est)
})
}else{
df_temp$CV_q[df_temp$D_out==1] <-
sapply(df_temp$CV[df_temp$D_out==1], function(cv){
1 - F_CV_sym(cv, lambda_exp_est)
})
}
df_temp$CV_q #Return the marginal q value
}
kinase <- read.csv("Kinase.final.csv", header=TRUE)
# Now the other 3 methods
kinase$out <- outlier_DCV(kinase$D, kinase$CV)
kinase$exp_j <- q_exp_joint_DCV(kinase$D, kinase$CV)
kinase$exp_m <- q_exp_marg_DCV(kinase$D, kinase$CV)
View(kinase)
View(kinase)
# Plot these results
ki_1 <- ggplot(kinase, aes(x=D, y=CV, color=out)) + scale_colour_viridis() +
geom_point() + labs(color="Status") + ggtitle("Asym. Laplace-Weibull")
ki_2 <- ggplot(kinase, aes(x=D, y=CV, color=exp_j)) + scale_colour_viridis() +
geom_point() + labs(color="Prob.") + ggtitle("Joint Exponential")
ki_3 <- ggplot(dfred, aes(x=D, y=CV, color=exp_m)) + scale_colour_viridis() +
geom_point() + labs(color="Prob.") + ggtitle("Marginal Exponential")
ki_3 <- ggplot(kinase, aes(x=D, y=CV, color=exp_m)) + scale_colour_viridis() +
geom_point() + labs(color="Prob.") + ggtitle("Marginal Exponential")
ki_4 <- ggplot(kinase, aes(x=D, y=CV, color=gg_j)) + scale_colour_viridis() +
geom_point() + labs(color="Prob.") + ggtitle("Joint GG")
ki_5 <- ggplot(kinase, aes(x=D, y=CV, color=gg_m)) + scale_colour_viridis() +
geom_point() + labs(color="Prob.") + ggtitle("Marginal GG")
grid.arrange(ki_1, ki_2, ki_3, ki_4, ki_5, nrow=3, ncol=2)
ki_ej_1 <- ggplot(kinase, aes(x=D, y=CV, color=(exp_j<0.05))) +
geom_point() + labs(color=expression(q<0.05)) + ggtitle("Joint Exponential")
ki_ej_2 <- ggplot(kinase, aes(x=D, y=CV, color=(exp_j<0.01))) +
geom_point() + labs(color=expression(q<0.01)) + ggtitle("Joint Exponential")
ki_ej_3 <- ggplot(kinase, aes(x=D, y=CV, color=(exp_j<0.005))) +
geom_point() + labs(color=expression(q<0.005)) + ggtitle("Joint Exponential")
ki_ej_4 <- ggplot(kinase, aes(x=D, y=CV, color=(exp_j<0.001))) +
geom_point() + labs(color=expression(q<0.001)) + ggtitle("Joint Exponential")
ki_ej_5 <- ggplot(kinase, aes(x=D, y=CV, color=(exp_j<0.0005))) +
geom_point() + labs(color=expression(q<5%*%10^-4)) + ggtitle("Joint Exponential")
ki_ej_6 <- ggplot(kinase, aes(x=D, y=CV, color=(exp_j<0.0001))) +
geom_point() + labs(color=expression(q<1%*%10^-4)) + ggtitle("Joint Exponential")
grid.arrange(ki_ej_1, ki_ej_2, ki_ej_3, ki_ej_4, ki_ej_5, ki_ej_6, nrow=3, ncol=2)
sum(as.numeric(kinase$exp_j < 0.0001)) / nrow(kinase)
sum(as.numeric(dfred$exp_j < 0.0001)) / nrow(dfred) #0.003292212
sum(as.numeric(kinase$exp_j < 0.0001)) / nrow(kinase) #0.003292212
ki_em_1 <- ggplot(kinase, aes(x=D, y=CV, color=(exp_m<0.9))) +
geom_point() + labs(color=expression(q<0.9)) + ggtitle("Marginal Exponential")
ki_em_2 <- ggplot(kinase, aes(x=D, y=CV, color=(exp_m<0.8))) +
geom_point() + labs(color=expression(q<0.8)) + ggtitle("Marginal Exponential")
ki_em_3 <- ggplot(kinase, aes(x=D, y=CV, color=(exp_m<0.7))) +
geom_point() + labs(color=expression(q<0.7)) + ggtitle("Marginal Exponential")
ki_em_4 <- ggplot(kinase, aes(x=D, y=CV, color=(exp_m<0.6))) +
geom_point() + labs(color=expression(q<0.6)) + ggtitle("Marginal Exponential")
grid.arrange(ki_em_1, ki_em_2, ki_em_3, ki_em_4, nrow=2, ncol=2)
sum(as.numeric(kinase$exp_m < 0.8)) / nrow(kinase)
# sum(as.numeric(kinase$out == 0)) / nrow(kinase) #0.7811974
# sum(as.numeric(kinase$out == 1)) / nrow(kinase) #0.2114587
# sum(as.numeric(kinase$out == 2)) / nrow(kinase) #0.007343895
sum(as.numeric(kinase$exp_m < 0.8)) / nrow(kinase) #0.006451979
sum(as.numeric(kinase$exp_m < 0.7)) / nrow(kinase)
sum(as.numeric(kinase$exp_m < 0.7)) / nrow(kinase) #0.002327253
sum(as.numeric(kinase$exp_m < 0.6)) / nrow(kinase)
sum(as.numeric(kinase$exp_m < 0.6)) / nrow(kinase) #0.001343374
sum(as.numeric(kinase$out == 0)) / nrow(kinase)
sum(as.numeric(kinase$out == 0)) / nrow(kinase) #0.781049
sum(as.numeric(kinase$out == 1)) / nrow(kinase)
sum(as.numeric(kinase$out == 1)) / nrow(kinase) #0.2116098
sum(as.numeric(kinase$out == 2)) / nrow(kinase)
sum(as.numeric(kinase$out == 2)) / nrow(kinase) #0.007341255
ki_gj_1 <- ggplot(kinase, aes(x=D, y=CV, color=(gg_j<0.05))) +
geom_point() + labs(color=expression(q<0.05)) + ggtitle("Joint GG")
ggplot(kinase, aes(x=D, y=CV, color=(gg_j<0.05))) +
geom_point() + labs(color=expression(q<0.05)) + ggtitle("Joint GG")
grid.arrange(ki_ej_1, ki_ej_2, ki_ej_3, ki_ej_4, ki_ej_5, ki_ej_6, nrow=3, ncol=2)
ki_gj_2 <- ggplot(kinase, aes(x=D, y=CV, color=(gg_j<0.01))) +
geom_point() + labs(color=expression(q<0.01)) + ggtitle("Joint GG")
ggplot(kinase, aes(x=D, y=CV, color=(gg_j<0.01))) +
geom_point() + labs(color=expression(q<0.01)) + ggtitle("Joint GG")
sum(as.numeric(kinase$gg_j < 0.01)) / nrow(kinase)
sum(as.numeric(kinase$gg_j < 0.05)) / nrow(kinase)
sum(as.numeric(kinase$gg_j < 0.05)) / nrow(kinase) #0.004257171
sum(as.numeric(kinase$gg_j < 0.01)) / nrow(kinase) #0.002213729
grid.arrange(ki_gj_1, ki_gj_2, nrow=1, ncol=2)
grid.arrange(ki_gj_1, ki_gj_2, nrow=2, ncol=1)
ki_gm_1 <- ggplot(kinase, aes(x=D, y=CV, color=(gg_m<0.05))) +
geom_point() + labs(color=expression(q<0.05)) + ggtitle("Marginal GG")
ki_gm_2 <- ggplot(kinase, aes(x=D, y=CV, color=(gg_m<0.01))) +
geom_point() + labs(color=expression(q<0.01)) + ggtitle("Marginal GG")
grid.arrange(ki_gm_1, ki_gm_2, nrow=1, ncol=2)
sum(as.numeric(kinase$gg_m < 0.05)) / nrow(kinase)
ki_gm_1 <- ggplot(kinase, aes(x=D, y=CV, color=(gg_m<0.1))) +
geom_point() + labs(color=expression(q<0.05)) + ggtitle("Marginal GG")
ki_gm_1 <- ggplot(kinase, aes(x=D, y=CV, color=(gg_m<0.1))) +
geom_point() + labs(color=expression(q<0.1)) + ggtitle("Marginal GG")
ki_gm_2 <- ggplot(kinase, aes(x=D, y=CV, color=(gg_m<0.05))) +
geom_point() + labs(color=expression(q<0.05)) + ggtitle("Marginal GG")
grid.arrange(ki_gm_1, ki_gm_2, nrow=1, ncol=2)
sum(as.numeric(kinase$gg_m < 0.1)) / nrow(kinase)
ggplot(kinase, aes(x=D, y=CV, color=(gg_m<0.5))) +
geom_point() + labs(color=expression(q<0.1)) + ggtitle("Marginal GG")
ggplot(kinase, aes(x=D, y=CV, color=(gg_m<0.3))) +
geom_point() + labs(color=expression(q<0.3)) + ggtitle("Marginal GG")
ki_gm_1 <- ggplot(kinase, aes(x=D, y=CV, color=(gg_m<0.5))) +
geom_point() + labs(color=expression(q<0.5)) + ggtitle("Marginal GG")
ki_gm_2 <- ggplot(kinase, aes(x=D, y=CV, color=(gg_m<0.3))) +
geom_point() + labs(color=expression(q<0.3)) + ggtitle("Marginal GG")
grid.arrange(ki_gm_1, ki_gm_2, nrow=1, ncol=2)
sum(as.numeric(kinase$gg_m < 0.5)) / nrow(kinase)
sum(as.numeric(kinase$gg_m < 0.3)) / nrow(kinase)
sum(as.numeric(kinase$gg_m < 0.2)) / nrow(kinase)
sum(as.numeric(kinase$gg_m < 0.3)) / nrow(kinase) #0.005657307
sum(as.numeric(kinase$gg_m < 0.3)) / nrow(kinase) #0.005657307
sum(as.numeric(kinase$gg_m < 0.2)) / nrow(kinase) #0.002913797
sum(as.numeric(kinase$gg_m < 0.3)) / nrow(kinase)
sum(as.numeric(kinase$gg_m < 0.2)) / nrow(kinase)
ki_gm_1 <- ggplot(kinase, aes(x=D, y=CV, color=(gg_m<0.5))) +
geom_point() + labs(color=expression(q<0.5)) + ggtitle("Marginal GG")
ki_gm_2 <- ggplot(kinase, aes(x=D, y=CV, color=(gg_m<0.4))) +
geom_point() + labs(color=expression(q<0.4)) + ggtitle("Marginal GG")
ki_gm_3 <- ggplot(kinase, aes(x=D, y=CV, color=(gg_m<0.3))) +
geom_point() + labs(color=expression(q<0.3)) + ggtitle("Marginal GG")
ki_gm_4 <- ggplot(kinase, aes(x=D, y=CV, color=(gg_m<0.2))) +
geom_point() + labs(color=expression(q<0.2)) + ggtitle("Marginal GG")
grid.arrange(ki_gm_1, ki_gm_2, ki_gm_3, ki_gm_4, nrow=2, ncol=2)
grid.arrange(ki_em_1, ki_em_2, ki_em_3, ki_em_4, nrow=2, ncol=2)
?sample_frac
citation("dplyr")
kinase_red <- sample_frac(kinase, 0.01)
kinase_red <- sample_frac(kinase, 0.1)
kinase_red <- sample_frac(kinase, 0.1) #Randomly sample the points
# Plot these results
ki_1 <- ggplot(kinase_red, aes(x=D, y=CV, color=out)) + scale_colour_viridis() +
geom_point() + labs(color="Status") + ggtitle("Asym. Laplace-Weibull")
ki_2 <- ggplot(kinase_red, aes(x=D, y=CV, color=exp_j)) + scale_colour_viridis() +
geom_point() + labs(color="Prob.") + ggtitle("Joint Exponential")
ki_3 <- ggplot(kinase_red, aes(x=D, y=CV, color=exp_m)) + scale_colour_viridis() +
geom_point() + labs(color="Prob.") + ggtitle("Marginal Exponential")
ki_4 <- ggplot(kinase_red, aes(x=D, y=CV, color=gg_j)) + scale_colour_viridis() +
geom_point() + labs(color="Prob.") + ggtitle("Joint GG")
ki_5 <- ggplot(kinase_red, aes(x=D, y=CV, color=gg_m)) + scale_colour_viridis() +
geom_point() + labs(color="Prob.") + ggtitle("Marginal GG")
grid.arrange(ki_1, ki_2, ki_3, ki_4, ki_5, nrow=3, ncol=2)
ki_ej_1 <- ggplot(kinase_red, aes(x=D, y=CV, color=(exp_j<0.05))) +
geom_point() + labs(color=expression(q<0.05)) + ggtitle("Joint Exponential")
ki_ej_2 <- ggplot(kinase_red, aes(x=D, y=CV, color=(exp_j<0.01))) +
geom_point() + labs(color=expression(q<0.01)) + ggtitle("Joint Exponential")
ki_ej_3 <- ggplot(kinase_red, aes(x=D, y=CV, color=(exp_j<0.005))) +
geom_point() + labs(color=expression(q<0.005)) + ggtitle("Joint Exponential")
ki_ej_4 <- ggplot(kinase_red, aes(x=D, y=CV, color=(exp_j<0.001))) +
geom_point() + labs(color=expression(q<0.001)) + ggtitle("Joint Exponential")
ki_ej_5 <- ggplot(kinase_red, aes(x=D, y=CV, color=(exp_j<0.0005))) +
geom_point() + labs(color=expression(q<5%*%10^-4)) + ggtitle("Joint Exponential")
ki_ej_6 <- ggplot(kinase_red, aes(x=D, y=CV, color=(exp_j<0.0001))) +
geom_point() + labs(color=expression(q<1%*%10^-4)) + ggtitle("Joint Exponential")
grid.arrange(ki_ej_1, ki_ej_2, ki_ej_3, ki_ej_4, ki_ej_5, ki_ej_6, nrow=3, ncol=2)
ki_em_1 <- ggplot(kinase_red, aes(x=D, y=CV, color=(exp_m<0.9))) +
geom_point() + labs(color=expression(q<0.9)) + ggtitle("Marginal Exponential")
ki_em_2 <- ggplot(kinase_red, aes(x=D, y=CV, color=(exp_m<0.8))) +
geom_point() + labs(color=expression(q<0.8)) + ggtitle("Marginal Exponential")
ki_em_3 <- ggplot(kinase_red, aes(x=D, y=CV, color=(exp_m<0.7))) +
geom_point() + labs(color=expression(q<0.7)) + ggtitle("Marginal Exponential")
ki_em_4 <- ggplot(kinase_red, aes(x=D, y=CV, color=(exp_m<0.6))) +
geom_point() + labs(color=expression(q<0.6)) + ggtitle("Marginal Exponential")
grid.arrange(ki_em_1, ki_em_2, ki_em_3, ki_em_4, nrow=2, ncol=2)
ki_gj_1 <- ggplot(kinase_red, aes(x=D, y=CV, color=(gg_j<0.05))) +
geom_point() + labs(color=expression(q<0.05)) + ggtitle("Joint GG")
ki_gj_2 <- ggplot(kinase_red, aes(x=D, y=CV, color=(gg_j<0.01))) +
geom_point() + labs(color=expression(q<0.01)) + ggtitle("Joint GG")
grid.arrange(ki_gj_1, ki_gj_2, nrow=1, ncol=2)
ki_gm_1 <- ggplot(kinase_red, aes(x=D, y=CV, color=(gg_m<0.5))) +
geom_point() + labs(color=expression(q<0.5)) + ggtitle("Marginal GG")
ki_gm_2 <- ggplot(kinase_red, aes(x=D, y=CV, color=(gg_m<0.4))) +
geom_point() + labs(color=expression(q<0.4)) + ggtitle("Marginal GG")
ki_gm_3 <- ggplot(kinase_red, aes(x=D, y=CV, color=(gg_m<0.3))) +
geom_point() + labs(color=expression(q<0.3)) + ggtitle("Marginal GG")
ki_gm_4 <- ggplot(kinase_red, aes(x=D, y=CV, color=(gg_m<0.2))) +
geom_point() + labs(color=expression(q<0.2)) + ggtitle("Marginal GG")
grid.arrange(ki_gm_1, ki_gm_2, ki_gm_3, ki_gm_4, nrow=2, ncol=2)
setwd("~/Documents/FCCC_Research/Ross_Lab/New_Stuff/replicateOutliers/R")
setwd("~/Documents/FCCC_Research/Ross_Lab/New_Stuff/replicateOutliers")
rm(list=ls())
library(devtools)
document()
library(replicateOutliers)
library(extremevalues)
?getOutliersI
document()
?outlier_DZ
document()
?outlier_DZ
document()
?outlier_DZ
document()
warning()
warning()
warning()
warning()
warning()
document()
warning()
?outlier_DZ
set.seed(1729)
n_total <- 10000
library(replicateOutliers)
df_gamma <- data.frame(
section=c(rep(0, 0.2*n_total), rep(1, 0.39*n_total), rep(2, 0.39*n_total),
rep(3, 0.01*n_total), rep(4, 0.01*n_total)),
X_1=c(rexp(0.2*n_total, 1/5), rgamma(0.39*n_total, shape=120, rate=1),
rgamma(0.39*n_total, shape=200, rate=1.5), rgamma(0.01*n_total, shape=100, rate=1),
rgamma(0.01*n_total, shape=10, rate=1/2)),
X_2=c(rexp(0.2*n_total, 1/6), rgamma(0.39*n_total, shape=200, rate= 1.5),
rgamma(0.39*n_total, shape=120, rate=1), rgamma(0.01*n_total, shape=10, rate=1/2),
rgamma(0.01*n_total, shape=100, rate=1))
)
df_gamma$D <- df_gamma$X_1 - df_gamma$X_2
df_gamma$CV <- sqrt(2) * abs(df_gamma$X_1 - df_gamma$X_2) / (df_gamma$X_1 + df_gamma$X_2)
df_gamma$out <- outlier_DCV(df_gamma$D, df_gamma$CV)
df_gamma$out <- outlier_DZ(df_gamma$D, df_gamma$CV)
ggplot(df_gamma, aes(x=D, y=Z, color=out)) + geom_point() +
ggtitle("Volcano Plot Using Gamma Distribution")
library(ggplot2)
ggplot(df_gamma, aes(x=D, y=Z, color=out)) + geom_point() +
ggtitle("Volcano Plot Using Gamma Distribution")
ggplot(df_gamma, aes(x=D, y=CV, color=out)) + geom_point() +
ggtitle("Volcano Plot Using Gamma Distribution")
document()
outlier_DZ(1:10, 1:12)
document()
library(replicateOutliers)
